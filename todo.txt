TO-DO:

+ Simulador (gerenciador de memória)
	+ criar diretório tmp
	+ ler arquivo de trace e pegar informações
	+ criar arquivos que representam as memórias
	+ criar estrutura pros processos lidos no trace (priority_queue, vector)
	+ bitmap pra cada uma das memórias (bitset)
	+ estrutura X que mantém os processos ativos (red black bst)
	+ colocar processos na memória virtual quando bater o t0 respectivo (algoritmo de gerencia)
	+ percorre e verifica a estrutra X e quando bater o t_i de cada acesso, colocar página p_i
	na memória física:
		+ verificar facilmente se a página está na memória física (tabelão de páginas)
		+ se não estiver, page fault: tratar de acordo com o algoritmo de substituição
	+ quando bater todos os tfs, o algoritmo termina e então fim da simulação!

+ Implementar algoritmos de gerência de espaço livre:
	+ First Fit
	+ Next Fit
	+ Best Fit
	+ Worst Fit

+ Implementar algoritmos de susbstituição de páginas
	+ Optimal (com lista de rótulos)
	+ Second Chance 
	+ Clock
	+ LRU (quarta versão feat. aging)

+ Testes
	+ Para algoritmos de gerência de espaço: medir tempo necessário para encontrar um espaço livre
	+ Para algoritmos de substituição de páginas: medir quantidade de page faults 


* QUOTE:
	Não é necessário simular o tempo real. Vocês tem que simular aqueles acessos à memória. Ou seja, não precisa ter uma thread representando cada processo e cada um deles executando durante a execução do simulador. Basta agendar eventos no simulador que ocorrerão nos instantes de acesso à memória.
